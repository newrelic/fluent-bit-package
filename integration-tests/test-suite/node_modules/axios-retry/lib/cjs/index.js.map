{"version":3,"sources":["../../es/index.mjs"],"names":["namespace","isNetworkError","error","CODE_EXCLUDE_LIST","response","Boolean","code","includes","SAFE_HTTP_METHODS","IDEMPOTENT_HTTP_METHODS","concat","isRetryableError","status","isSafeRequestError","config","indexOf","method","isIdempotentRequestError","isNetworkOrIdempotentRequestError","noDelay","exponentialDelay","retryNumber","delayFactor","delay","Math","pow","randomSum","random","getCurrentState","currentState","retryCount","getRequestOptions","defaultOptions","fixConfig","axios","defaults","agent","httpAgent","httpsAgent","shouldRetry","retries","retryCondition","shouldRetryOrPromise","shouldRetryPromiseResult","axiosRetry","requestInterceptorId","interceptors","request","use","lastRequestTime","Date","now","responseInterceptorId","Promise","reject","retryDelay","shouldResetTimeout","onRetry","timeout","lastRequestDuration","transformRequest","data","resolve","setTimeout"],"mappings":"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","sourcesContent":["import isRetryAllowed from 'is-retry-allowed';\n\nexport const namespace = 'axios-retry';\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isNetworkError(error) {\n  const CODE_EXCLUDE_LIST = ['ERR_CANCELED', 'ECONNABORTED'];\n\n  return (\n    !error.response &&\n    Boolean(error.code) && // Prevents retrying cancelled requests\n    !CODE_EXCLUDE_LIST.includes(error.code) && // Prevents retrying timed out & cancelled requests\n    isRetryAllowed(error) // Prevents retrying unsafe errors\n  );\n}\n\nconst SAFE_HTTP_METHODS = ['get', 'head', 'options'];\nconst IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isRetryableError(error) {\n  return (\n    error.code !== 'ECONNABORTED' &&\n    (!error.response || (error.response.status >= 500 && error.response.status <= 599))\n  );\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isSafeRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isIdempotentRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isNetworkOrIdempotentRequestError(error) {\n  return isNetworkError(error) || isIdempotentRequestError(error);\n}\n\n/**\n * @return {number} - delay in milliseconds, always 0\n */\nfunction noDelay() {\n  return 0;\n}\n\n/**\n * Set delayFactor 1000 for an exponential delay to occur on the order\n * of seconds\n * @param  {number} [retryNumber=0]\n * @param  {Error}  error - unused; for existing API of retryDelay callback\n * @param  {number} [delayFactor=100] milliseconds\n * @return {number} - delay in milliseconds\n */\nexport function exponentialDelay(retryNumber = 0, error, delayFactor = 100) {\n  const delay = Math.pow(2, retryNumber) * delayFactor;\n  const randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay\n  return delay + randomSum;\n}\n\n/**\n * Initializes and returns the retry state for the given request/config\n * @param  {AxiosRequestConfig} config\n * @return {Object}\n */\nfunction getCurrentState(config) {\n  const currentState = config[namespace] || {};\n  currentState.retryCount = currentState.retryCount || 0;\n  config[namespace] = currentState;\n  return currentState;\n}\n\n/**\n * Returns the axios-retry options for the current request\n * @param  {AxiosRequestConfig} config\n * @param  {AxiosRetryConfig} defaultOptions\n * @return {AxiosRetryConfig}\n */\nfunction getRequestOptions(config, defaultOptions) {\n  return { ...defaultOptions, ...config[namespace] };\n}\n\n/**\n * @param  {Axios} axios\n * @param  {AxiosRequestConfig} config\n */\nfunction fixConfig(axios, config) {\n  if (axios.defaults.agent === config.agent) {\n    delete config.agent;\n  }\n  if (axios.defaults.httpAgent === config.httpAgent) {\n    delete config.httpAgent;\n  }\n  if (axios.defaults.httpsAgent === config.httpsAgent) {\n    delete config.httpsAgent;\n  }\n}\n\n/**\n * Checks retryCondition if request can be retried. Handles it's retruning value or Promise.\n * @param  {number} retries\n * @param  {Function} retryCondition\n * @param  {Object} currentState\n * @param  {Error} error\n * @return {boolean}\n */\nasync function shouldRetry(retries, retryCondition, currentState, error) {\n  const shouldRetryOrPromise = currentState.retryCount < retries && retryCondition(error);\n\n  // This could be a promise\n  if (typeof shouldRetryOrPromise === 'object') {\n    try {\n      const shouldRetryPromiseResult = await shouldRetryOrPromise;\n      // keep return true unless shouldRetryPromiseResult return false for compatibility\n      return shouldRetryPromiseResult !== false;\n    } catch (_err) {\n      return false;\n    }\n  }\n  return shouldRetryOrPromise;\n}\n\n/**\n * Adds response interceptors to an axios instance to retry requests failed due to network issues\n *\n * @example\n *\n * import axios from 'axios';\n *\n * axiosRetry(axios, { retries: 3 });\n *\n * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Exponential back-off retry delay between requests\n * axiosRetry(axios, { retryDelay : axiosRetry.exponentialDelay});\n *\n * // Custom retry delay\n * axiosRetry(axios, { retryDelay : (retryCount) => {\n *   return retryCount * 1000;\n * }});\n *\n * // Also works with custom axios instances\n * const client = axios.create({ baseURL: 'http://example.com' });\n * axiosRetry(client, { retries: 3 });\n *\n * client.get('/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Allows request-specific configuration\n * client\n *   .get('/test', {\n *     'axios-retry': {\n *       retries: 0\n *     }\n *   })\n *   .catch(error => { // The first request fails\n *     error !== undefined\n *   });\n *\n * @param {Axios} axios An axios instance (the axios object or one created from axios.create)\n * @param {Object} [defaultOptions]\n * @param {number} [defaultOptions.retries=3] Number of retries\n * @param {boolean} [defaultOptions.shouldResetTimeout=false]\n *        Defines if the timeout should be reset between retries\n * @param {Function} [defaultOptions.retryCondition=isNetworkOrIdempotentRequestError]\n *        A function to determine if the error can be retried\n * @param {Function} [defaultOptions.retryDelay=noDelay]\n *        A function to determine the delay between retry requests\n * @param {Function} [defaultOptions.onRetry=()=>{}]\n *        A function to get notified when a retry occurs\n * @return {{ requestInterceptorId: number, responseInterceptorId: number }}\n *        The ids of the interceptors added to the request and to the response (so they can be ejected at a later time)\n */\nexport default function axiosRetry(axios, defaultOptions) {\n  const requestInterceptorId = axios.interceptors.request.use((config) => {\n    const currentState = getCurrentState(config);\n    currentState.lastRequestTime = Date.now();\n    return config;\n  });\n\n  const responseInterceptorId = axios.interceptors.response.use(null, async (error) => {\n    const { config } = error;\n\n    // If we have no information to retry the request\n    if (!config) {\n      return Promise.reject(error);\n    }\n\n    const {\n      retries = 3,\n      retryCondition = isNetworkOrIdempotentRequestError,\n      retryDelay = noDelay,\n      shouldResetTimeout = false,\n      onRetry = () => {}\n    } = getRequestOptions(config, defaultOptions);\n\n    const currentState = getCurrentState(config);\n\n    if (await shouldRetry(retries, retryCondition, currentState, error)) {\n      currentState.retryCount += 1;\n      const delay = retryDelay(currentState.retryCount, error);\n\n      // Axios fails merging this configuration to the default configuration because it has an issue\n      // with circular structures: https://github.com/mzabriskie/axios/issues/370\n      fixConfig(axios, config);\n\n      if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {\n        const lastRequestDuration = Date.now() - currentState.lastRequestTime;\n        const timeout = config.timeout - lastRequestDuration - delay;\n        if (timeout <= 0) {\n          return Promise.reject(error);\n        }\n        config.timeout = timeout;\n      }\n\n      config.transformRequest = [(data) => data];\n\n      onRetry(currentState.retryCount, error, config);\n\n      return new Promise((resolve) => setTimeout(() => resolve(axios(config)), delay));\n    }\n\n    return Promise.reject(error);\n  });\n\n  return { requestInterceptorId, responseInterceptorId };\n}\n\n// Compatibility with CommonJS\naxiosRetry.isNetworkError = isNetworkError;\naxiosRetry.isSafeRequestError = isSafeRequestError;\naxiosRetry.isIdempotentRequestError = isIdempotentRequestError;\naxiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\naxiosRetry.exponentialDelay = exponentialDelay;\naxiosRetry.isRetryableError = isRetryableError;\n"],"file":"index.js"}
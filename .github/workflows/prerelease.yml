name: Prerelease pipeline

on:
  release:
    types:
      - prereleased
    tags:
      - '*'

env:
  GPG_MAIL: ${{ secrets.LOGGING_GPG_MAIL }}
  GPG_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY_BASE64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
  AWS_S3_BUCKET_NAME: "nr-downloads-ohai-staging"
  AWS_S3_LOCK_BUCKET_NAME: "onhost-ci-lock-staging"
  AWS_REGION: "us-east-1"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  VERSION: ${{ github.event.release.tag_name }}

jobs:
  rpm:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        packages:
          ### compose for:
          ### ${FB_ARCH/NR_ARCH/DISTRO}
          ### FB_ARCH: to be used in url to download FB packages
          ### NR_ARCH: to be used in our own package name once we downloaded FB packages
          ### note: for centos/8 there is no package, FB is using centos/7 but we want to distribute by version
          - x86_64/x86_64/amazonlinux/2
          - aarch64/arm64/amazonlinux/2
          - x86_64/x86_64/centos/7
          - aarch64/arm64/centos/7
          - x86_64/x86_64/centos/8
          - aarch64/arm64/centos/8

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Extract FB values from Matrix
        id: fb
        run: echo "::set-output name=arch::$(echo ${{ env.distro }} | cut -d/ -f1)" &&
          echo "::set-output name=distro::$(echo ${{ env.distro }} | cut -d/ -f3- | sed 's:8:7:g')"
        env:
          distro: ${{ matrix.packages }}

      - name: Extract NR values from Matrix
        id: nr
        run: echo "::set-output name=arch::$(echo ${{ env.distro }} | cut -d/ -f2)" &&
          echo "::set-output name=distro::$(echo ${{ env.distro }} | cut -d/ -f3- | sed 's:/:\-:g')"
        env:
          distro: ${{ matrix.packages }}

      - name: Create working directory
        run: mkdir -p packages/${{ env.version }}/${{ env.distro }}
        env:
          version: ${{ env.VERSION }}
          distro: ${{ steps.fb.outputs.distro }}

      - name: Download and Rename binaries
        run: curl https://packages.fluentbit.io/${{ env.fb-distro }}/${{ env.fb-arch }}/td-agent-bit-${{ env.version }}-1.${{ env.fb-arch }}.rpm
          -o packages/${{ env.version }}/${{ env.fb-distro }}/td-agent-bit-${{ env.version }}-1.${{ env.nr-distro }}.${{ env.nr-arch }}.rpm
        env:
          fb-arch: ${{ steps.fb.outputs.arch }}
          fb-distro: ${{ steps.fb.outputs.distro }}
          nr-arch: ${{ steps.nr.outputs.arch }}
          nr-distro: ${{ steps.nr.outputs.distro }}
          version: ${{ env.VERSION }}

      - name: Sign artifacts
        run: |
          sudo apt-get install -y debsigs
          bash ./scripts/sign.sh

      - uses: actions/upload-artifact@v2
        with:
          name: td-agent-bit_${{ env.version }}_rpm
          path: packages/
        env:
          version: ${{ env.VERSION }}

  deb:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        packages:
          - amd64/debian/bullseye
          - arm64/debian/bullseye
          - amd64/debian/buster
          - arm64/debian/buster
          - amd64/ubuntu/bionic
          - arm64/ubuntu/bionic
          - amd64/ubuntu/focal
          - arm64/ubuntu/focal

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Extract ARCH value from Matrix
        id: arch
        run: echo "::set-output name=value::$(echo ${{ env.distro }} | cut -d/ -f1)"
        env:
          distro: ${{ matrix.packages }}

      - name: Extract NR values from Matrix
        id: distros
        run: echo "::set-output name=nr::$(echo ${{ env.distro }} | cut -d/ -f2- | sed 's:/:\-:g')" &&
          echo "::set-output name=fb::$(echo ${{ env.distro }} | cut -d/ -f2-)"
        env:
          distro: ${{ matrix.packages }}

      - name: Create working directory
        run: mkdir -p packages/${{ env.version }}/${{ env.distro }}
        env:
          version: ${{ env.VERSION }}
          distro: ${{ steps.distros.outputs.fb }}

      - name: Download and Rename binaries
        run: curl https://packages.fluentbit.io/${{ env.fb-distro }}/pool/main/t/td-agent-bit/td-agent-bit_${{ env.version }}_${{ env.arch }}.deb
          -o packages/${{ env.version }}/${{ env.fb-distro }}/td-agent-bit_${{ env.version }}_${{ env.nr-distro }}_${{ env.arch }}.deb
        env:
          fb-distro: ${{ steps.distros.outputs.fb }}
          nr-distro: ${{ steps.distros.outputs.nr }}
          arch: ${{ steps.arch.outputs.value }}
          version: ${{ env.VERSION }}

      - name: Sign artifacts
        run: |
          sudo apt-get install -y debsigs
          bash ./scripts/sign.sh

      - uses: actions/upload-artifact@v2
        with:
          name: td-agent-bit_${{ env.version }}_deb
          path: packages/
        env:
          version: ${{ env.VERSION }}

  zip:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        packages:
          - 386/win32
          - amd64/win64

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Create working directory
        run: mkdir -p ~/packages

      - name: Extract values from Matrix
        id: app
        run: echo "::set-output name=arch::$(echo ${{ env.packages }} | cut -d/ -f1)" &&
          echo "::set-output name=version::$(echo ${{ env.packages }} | cut -d/ -f2)"
        env:
          packages: ${{ matrix.packages }}

      - name: Download FB for windows & create artifact
        run: |
          FB_MAJOR_MINOR_VERSION=$(cut -d. -f1-2 <<< "${{ env.version }}")
          wget "http://fluentbit.io/releases/${FB_MAJOR_MINOR_VERSION}/fluent-bit-${{ env.version }}-${{ env.app }}".zip
          unzip fluent-bit-${{ env.version }}-${{ env.app }}.zip
          zip -r -j ~/packages/fb-windows-${{ env.arch }}.zip fluent-bit-${{ env.version }}-${{ env.app }}/bin/fluent-bit.exe fluent-bit-${{ env.version }}-${{ env.app }}/bin/fluent-bit.dll
        env:
          version: ${{ env.VERSION }}
          app: ${{ steps.app.outputs.version }}
          arch: ${{ steps.app.outputs.arch }}

      - uses: actions/upload-artifact@v2
        with:
          name: td-agent-bit_${{ env.version }}_zip
          path: ~/packages/
        env:
          version: ${{ env.VERSION }}

  upload-assets:
    runs-on: ubuntu-latest
    needs: [ rpm, deb, zip ]
    strategy:
      matrix:
        distro: [ rpm, deb, zip ]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Create working directory
        run: mkdir -p ~/packages

      - uses: actions/download-artifact@v2
        with:
          name: td-agent-bit_${{ env.version }}_${{ env.type }}
          path: packages/${{ env.type }}
        env:
          version: ${{ env.VERSION }}
          type: ${{ matrix.distro }}

      - name: Upload asset
        run: bash ./scripts/upload_assets_gh.sh

  publishing-to-s3:
    name: Publish linux artifacts into s3 test bucket
    runs-on: ubuntu-20.04
    needs: [ upload-assets ]
    steps:
      - name: Publish assets to S3 action
        uses: newrelic/infrastructure-publish-action@v1.2.3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.OHAI_AWS_ACCESS_KEY_ID_STAGING }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.OHAI_AWS_SECRET_ACCESS_KEY_STAGING }}
          AWS_ROLE_ARN: ${{ secrets.OHAI_AWS_ROLE_ARN_STAGING }}
          AWS_ROLE_SESSION_NAME: ${{ secrets.OHAI_AWS_ROLE_SESSION_NAME_STAGING }}
        with:
          tag: ${{env.VERSION}}
          app_name: "td-agent-bit"
          repo_name: "newrelic/fluent-bit-package"
          schema: "custom"
          schema_url: "https://raw.githubusercontent.com/newrelic/fluent-bit-package/main/schemas/fb-linux.yml"
          aws_access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws_s3_bucket_name: ${{ env.AWS_S3_BUCKET_NAME }}
          aws_s3_lock_bucket_name: ${{ env.AWS_S3_LOCK_BUCKET_NAME }}
          access_point_host: "staging"
          run_id: ${{ github.run_id }}
          aws_region: ${{ env.AWS_REGION }}
          aws_role_session_name: ${{ env.AWS_ROLE_SESSION_NAME }}
          aws_role_arn: ${{ env.AWS_ROLE_ARN }}
          # used for signing package stuff
          gpg_passphrase: ${{ env.GPG_PASSPHRASE }}
          gpg_private_key_base64: ${{ env.GPG_PRIVATE_KEY_BASE64 }}

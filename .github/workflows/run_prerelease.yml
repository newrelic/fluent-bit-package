name: run_e2e_tests HW workflow

on:
  # To be able to launch it from pull_request.yml programmatically
  workflow_call:
    inputs:
      gh_release_name:
        description: GitHub release name containing Fluent Bit packages
        required: false
        default: latest
        type: string
      infra_agent_version:
        description: Infrastructure Agent version
        required: true
        default: latest
        type: string
      infra_agent_env:
        description: Repository used to download infra-agent
        required: false
        default: staging
        type: string  # To be able to launch it from the Actions UI, on-demand
      pre_release_name:
        description: Pre-release name
        required: true
        type: string
      sles_matrix:
        description: Matrix of SLES distros, versions, and architectures to run the tests on
        required: false
        type: string
      windows_matrix:
        description: Matrix of Windows distros, versions, and architectures to run the tests on
        required: false
        type: string
      linux_test_report_name:
        description: Linux test report name
        required: false
        default: test-report-linux-prerelease.xml
        type: string
      windows_test_report_name:
        description: Windows test report name
        required: false
        default: test-report-windows-prerelease.xml
        type: string
  workflow_dispatch:
    inputs:
      gh_release_name:
        description: GitHub release name containing Fluent Bit packages
        required: false
        default: latest
        type: string
      infra_agent_version:
        description: Infrastructure Agent version
        required: true
        default: latest
        type: string
      infra_agent_env:
        description: Repository used to download infra-agent
        required: false
        default: production
        type: string  # To be able to launch it from the Actions UI, on-demand
      pre_release_name:
        description: Pre-release name
        required: true
        type: string
      sles_matrix:
        description: Matrix of SLES distros, versions, and architectures to run the tests on
        required: false
        type: string
      windows_matrix:
        description: Matrix of Windows distros, versions, and architectures to run the tests on
        required: false
        type: string
      linux_test_report_name:
        description: Linux test report name
        required: false
        default: test-report-linux-prerelease.xml
        type: string
      windows_test_report_name:
        description: Windows test report name
        required: false
        default: test-report-windows-prerelease.xml
        type: string

# So that only one test suite will be run simultaneously against a given GH release. This ensures that there will not
# be multiple runners accessing the same Terraform state at the same time. Note that we need to set this lock here as well
# as in the pull_request.yml since this workflow can also be run on-demand from the UI, and potentially by the infrastructure-agent
# CI/CD pipeline.
concurrency: e2e-workflow-${{ inputs.gh_release_name }}

env:
  GH_TOKEN: ${{ github.token }}
  GPG_MAIL: ${{ secrets.LOGGING_GPG_MAIL }}
  GPG_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY_BASE64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }} # base64 encoded

jobs:
  spin_up_test_executor_instances:
    name: Spin up test executor instances
    uses: ./.github/workflows/run_task.yml
    with:
      container_make_target: "terraform/ec2-test-executors/${{ inputs.infra_agent_env }} PRE_RELEASE_NAME=${{ inputs.gh_release_name }}"
    secrets: inherit

  spin_up_suse:
    #    needs: setup_environment
    if: ${{ inputs.sles_matrix != '[]' }}
    uses: ./.github/workflows/run_task.yml
    with:
      container_make_target: "terraform/ec2-suse-builders/provision PRE_RELEASE_NAME=${{ inputs.pre_release_name }}"
    secrets: inherit

  build_suse_packages:
    needs: [ spin_up_suse ]
    uses: ./.github/workflows/run_task.yml
    with:
      container_make_target: "ansible/build-fb-suse/run PRE_RELEASE_NAME=${{ inputs.pre_release_name }}"
    secrets: inherit

  tear_down_suse:
    needs: [ build_suse_packages ]
    if: always()
    uses: ./.github/workflows/run_task.yml
    with:
      container_make_target: "terraform/ec2-suse-builders/clean PRE_RELEASE_NAME=${{ inputs.pre_release_name }}"
    secrets: inherit

  sign_suse_packages:
    needs: [ build_suse_packages, spin_up_suse ]
    runs-on: ubuntu-latest
    if: ${{ inputs.sles_matrix != '[]' }}
    strategy:
      fail-fast: true
      matrix:
        include: ${{ fromJson(inputs.sles_matrix) }}
    name: ${{matrix.osDistro }}-${{ matrix.osVersion }}-${{ matrix.arch }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Fetch package from GitHub pre-release
        run: |
          mkdir -p packages
          gh release download ${{ inputs.pre_release_name }} --pattern ${{ matrix.targetPackageName }} --dir packages

      - name: Sign package
        run: |
          sudo apt-get install -y debsigs
          bash ./scripts/sign.sh

      - name: Upload signed asset
        run:
          gh release upload ${{ inputs.pre_release_name }} packages/* --clobber
  trying_something:
    name: Trying Something
    needs: [ spin_up_test_executor_instances, build_suse_packages, tear_down_suse, sign_suse_packages ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "${{ needs.spin_up_test_executor_instances.result }}"
          echo "${{ needs.tear_down_suse.result }}"
          echo "${{ needs.build_suse_packages.result }}"
          echo "${{ needs.sign_suse_packages.result }}"
          echo "${{ ( needs.build_suse_packages.result == 'success' || needs.build_suse_packages.result == 'skipped') }}"

  provision_and_execute_tests_linux:
    name:  tests for linux
    needs: [ spin_up_test_executor_instances, build_suse_packages, tear_down_suse ]
    if: ${{ always()  && ( needs.build_suse_packages.result == 'success' || needs.build_suse_packages.result == 'skipped') }}
    uses: ./.github/workflows/run_task.yml
    with:
      container_make_target: "ansible/provision-and-execute-tests/${{ inputs.infra_agent_env }}-linux PRE_RELEASE_NAME=${{ inputs.gh_release_name }} TEST_REPORT_NAME=${{ inputs.linux_test_report_name }}"
    secrets: inherit

  provision_and_execute_tests_windows:
    name: Provision instances and run tests for windows
    needs: spin_up_test_executor_instances
    if: ${{ (needs.spin_up_test_executor_instances.result == 'success' || needs.spin_up_test_executor_instances.result == 'skipped') && ( inputs.windows_matrix != '[]' ) }}
    uses: ./.github/workflows/run_task.yml
    with:
      container_make_target: "ansible/provision-and-execute-tests/${{ inputs.infra_agent_env }}-windows PRE_RELEASE_NAME=${{ inputs.gh_release_name }} TEST_REPORT_NAME=${{ inputs.windows_test_report_name }}"
    secrets: inherit

  report_linux_test_results:
    name: Report results
    runs-on: ubuntu-20.04
    needs: [ provision_and_execute_tests_linux ]
    if: ${{ needs.provision_and_execute_tests_linux.result == 'success' }}
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download report from pre-release # not ok
        run: |
          gh release download ${{ inputs.gh_release_name }} --pattern ${{ inputs.linux_test_report_name }}

      - name: Tests Report Details Linux # ok
        uses: dorny/test-reporter@v1
        with:
          name: Tests Report Details  # Name of the check run which will be created
          path: ${{ inputs.linux_test_report_name }} # Path to test results
          reporter: jest-junit

      - name: Tests Report Summary Linux # ok
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            ${{ inputs.linux_test_report_name }}

  report_windows_test_results:
    name: Report results
    runs-on: ubuntu-20.04
    needs: [ provision_and_execute_tests_windows ]
    if: ${{ inputs.windows_matrix != '[]' }}
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download report from pre-release # not ok
        run: |
          gh release download ${{ inputs.gh_release_name }} --pattern ${{ inputs.windows_test_report_name }}

      - name: Tests Report Details Windows # ok
        uses: dorny/test-reporter@v1
        with:
          name: Tests Report Details  # Name of the check run which will be created
          path: ${{ inputs.windows_test_report_name }} # Path to test results
          reporter: jest-junit

      - name: Tests Report Summary Windows # ok
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            ${{ inputs.windows_test_report_name }}

  tear_down_test_executor_instances:
    name: Tear down test executor instances
    if: always()
    needs: [ report_windows_test_results, report_linux_test_results ]
    uses: ./.github/workflows/run_task.yml
    with:
      container_make_target: "terraform/ec2-test-executors/clean PRE_RELEASE_NAME=${{ inputs.gh_release_name }}"
    secrets: inherit
